// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id            String     @id @default(cuid())
  name          String
  shopifyDomain String     @unique
  accessToken   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  customers     Customer[]
  orders        Order[]
  products      Product[]
  events        Event[]
  users         User[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String   @id @default(cuid())
  shopifyId String   @unique
  email     String?
  firstName String?
  lastName  String?
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id         String      @id @default(cuid())
  shopifyId  String      @unique
  title      String
  price      Float
  tenantId   String
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  shopifyId  String      @unique
  customerId String?
  customer   Customer?   @relation(fields: [customerId], references: [id])
  totalPrice Float
  tenantId   String
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items      OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Event {
  id        String   @id @default(cuid())
  type      String
  data      Json
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
